(function(){"use strict";angular.module("tubular.directives").directive("tbSimpleEditor",["tubularEditorService",function(n){return{template:'<div ng-class="{ \'form-group\' : isEditing, \'has-error\' : !$valid }"><span ng-hide="isEditing">{{value}}<\/span><label ng-show="showLabel">{{ label }}<\/label><input type="{{editorType}}" placeholder="{{placeholder}}" ng-show="isEditing" ng-model="value" class="form-control"  ng-required="required" ng-readonly="readOnly" /><span class="help-block error-block" ng-show="isEditing" ng-repeat="error in state.$errors">{{error}}<\/span><\/div>',restrict:"E",replace:!0,transclude:!0,scope:n.defaultScope,controller:["$scope",function(t){t.validate=function(){if(angular.isUndefined(t.min)==!1&&angular.isUndefined(t.value)==!1&&t.value.length<parseInt(t.min)){t.$valid=!1;t.state.$errors=["The fields needs to be minimum "+t.min+" chars"];return}if(angular.isUndefined(t.max)==!1&&angular.isUndefined(t.value)==!1&&t.value.length>parseInt(t.max)){t.$valid=!1;t.state.$errors=["The fields needs to be maximum "+t.min+" chars"];return}};n.setupScope(t)}]}}]).directive("tbNumericEditor",["tubularEditorService",function(n){return{template:'<div ng-class="{ \'form-group\' : isEditing, \'has-error\' : !$valid }"><span ng-hide="isEditing">{{value | numberorcurrency: format }}<\/span><label ng-show="showLabel">{{ label }}<\/label><div class="input-group" ng-show="isEditing"><div class="input-group-addon" ng-show="format == \'C\'">$<\/div><input type="number" placeholder="{{placeholder}}" ng-model="value" class="form-control" ng-required="required" ng-readonly="readOnly" /><\/div><span class="help-block error-block" ng-show="isEditing" ng-repeat="error in state.$errors">{{error}}<\/span><\/div>',restrict:"E",replace:!0,transclude:!0,scope:n.defaultScope,controller:["$scope",function(t){t.validate=function(){(angular.isUndefined(t.min)==!1&&angular.isUndefined(t.value)==!1&&(t.$valid=t.value>=t.min,t.$valid==!1&&(t.state.$errors=["The minimum is "+t.min])),t.$valid!=!1)&&angular.isUndefined(t.max)==!1&&angular.isUndefined(t.value)==!1&&(t.$valid=t.value<=t.max,t.$valid==!1&&(t.state.$errors=["The maximum is "+t.max]))};n.setupScope(t,0)}]}}]).directive("tbDateTimeEditor",["tubularEditorService",function(n){return{template:'<div ng-class="{ \'form-group\' : isEditing }"><span ng-hide="isEditing">{{ value | date: format }}<\/span><label ng-show="showLabel">{{ label }}<\/label><input type="datetime-local" ng-show="isEditing" ng-model="value" class="form-control" ng-required="required" ng-readonly="readOnly" /><span class="help-block error-block" ng-show="isEditing" ng-repeat="error in state.$errors">{{error}}<\/span><\/div>',restrict:"E",replace:!0,transclude:!0,scope:n.defaultScope,controller:["$scope",function(t){t.DataType="numeric";t.validate=function(){(angular.isUndefined(t.min)==!1&&(t.$valid=t.value>=t.min,t.$valid==!1&&(t.state.$errors=["The minimum is "+t.min])),t.$valid!=!1)&&angular.isUndefined(t.max)==!1&&(t.$valid=t.value<=t.max,t.$valid==!1&&(t.state.$errors=["The maximum is "+t.max]))};n.setupScope(t,"yyyy-MM-dd HH:mm")}],compile:function(){return{pre:function(){},post:function(n,t){var i=$(t).find("input[type=datetime-local]")[0];if(i.type!=="datetime-local")$(i).datepicker({dateFormat:n.format.toLowerCase()}).on("dateChange",function(t){n.value=t.date;n.$parent.Model.$hasChanges=!0})}}}}}]).directive("tbDateEditor",["tubularEditorService",function(n){return{template:'<div ng-class="{ \'form-group\' : isEditing }"><span ng-hide="isEditing">{{ value | date: format }}<\/span><label ng-show="showLabel">{{ label }}<\/label><input type="date" ng-show="isEditing" ng-model="value" class="form-control" ng-required="required" ng-readonly="readOnly" /><span class="help-block error-block" ng-show="isEditing" ng-repeat="error in state.$errors">{{error}}<\/span><\/div>',restrict:"E",replace:!0,transclude:!0,scope:n.defaultScope,controller:["$scope",function(t){t.DataType="date";t.validate=function(){if(t.validate=function(){(angular.isUndefined(t.min)==!1&&(t.$valid=t.value>=t.min,t.$valid==!1&&(t.state.$errors=["The minimum is "+t.min])),t.$valid!=!1)&&angular.isUndefined(t.max)==!1&&(t.$valid=t.value<=t.max,t.$valid==!1&&(t.state.$errors=["The maximum is "+t.max]))},t.value==null){t.$valid=!1;t.state.$errors=["Invalid date"];return}};n.setupScope(t,"yyyy-MM-dd")}],compile:function(){return{pre:function(){},post:function(n,t){var i=$(t).find("input[type=date]")[0];if(i.type!="date")$(i).datepicker({dateFormat:n.format.toLowerCase()}).on("dateChange",function(t){n.value=t.date;n.$parent.Model.$hasChanges=!0})}}}}}]).directive("tbDropdownEditor",["tubularEditorService","tubularHttp",function(n,t){return{template:'<div ng-class="{ \'form-group\' : isEditing, \'has-error\' : !$valid }"><span ng-hide="isEditing">{{ value }}<\/span><label ng-show="showLabel">{{ label }}<\/label><select ng-options="d for d in options" ng-show="isEditing" ng-model="value" class="form-control" ng-required="required" /><span class="help-block error-block" ng-show="isEditing" ng-repeat="error in state.$errors">{{error}}<\/span><\/div>',restrict:"E",replace:!0,transclude:!0,scope:angular.extend({options:"=?",optionsUrl:"@"},n.defaultScope),controller:["$scope",function(i){n.setupScope(i);i.$editorType="select";i.dataIsLoaded=!1;i.loadData=function(){if(!i.dataIsLoaded){var n=t.retrieveDataAsync({serverUrl:i.optionsUrl,requestMethod:"GET"}),r=i.value;i.value="";n.promise.then(function(n){i.options=n;i.dataIsLoaded=!0;i.value=r},function(n){i.$emit("tbGrid_OnConnectionError",n)})}};angular.isUndefined(i.optionsUrl)==!1&&(i.isEditing?i.loadData():i.$watch("isEditing",function(){i.isEditing&&i.loadData()}))}]}}]).directive("tbTypeaheadEditor",["tubularEditorService","tubularHttp","$q",function(n,t,i){return{template:'<div ng-class="{ \'form-group\' : isEditing, \'has-error\' : !$valid }"><span ng-hide="isEditing">{{ value }}<\/span><label ng-show="showLabel">{{ label }}<\/label><input ng-show="isEditing" ng-model="value" class="form-control" typeahead="o for o in getValues($viewValue)" ng-required="required" /><span class="help-block error-block" ng-show="isEditing" ng-repeat="error in state.$errors">{{error}}<\/span><\/div>',restrict:"E",replace:!0,transclude:!0,scope:angular.extend({options:"=?",optionsUrl:"@"},n.defaultScope),controller:["$scope",function(r){n.setupScope(r);r.$editorType="select";r.getValues=function(n){return angular.isDefined(r.optionsUrl)?t.retrieveDataAsync({serverUrl:r.optionsUrl+"?search="+n,requestMethod:"GET"}).promise:i(function(n){n(r.options)})}}]}}]).directive("tbHiddenField",["tubularEditorService",function(n){return{template:'<input type="hidden" ng-show="isEditing" ng-model="value" class="form-control"  />',restrict:"E",replace:!0,transclude:!0,scope:n.defaultScope,controller:["$scope",function(t){n.setupScope(t)}]}}]).directive("tbCheckboxField",["tubularEditorService",function(n){return{template:'<div ng-class="{ \'form-group\' : isEditing, \'has-error\' : !$valid }"><span ng-hide="isEditing">{{value}}<\/span><label><input type="checkbox" ng-show="isEditing" ng-model="value" ng-required="required" /> <span ng-show="showLabel">{{label}}<\/span><\/label><span class="help-block error-block" ng-show="isEditing" ng-repeat="error in state.$errors">{{error}}<\/span><span class="help-block" ng-show="isEditing && help">{{help}}<\/span><\/div>',restrict:"E",replace:!0,transclude:!0,scope:n.defaultScope,controller:["$scope",function(t){n.setupScope(t)}]}}]).directive("tbTextArea",["tubularEditorService",function(n){return{template:'<div ng-class="{ \'form-group\' : isEditing, \'has-error\' : !$valid }"><span ng-hide="isEditing">{{value}}<\/span><label ng-show="showLabel">{{ label }}<\/label><textarea ng-show="isEditing" placeholder="{{placeholder}}" ng-model="value" class="form-control"  ng-required="required" ng-readonly="readOnly"><\/textarea><span class="help-block error-block" ng-show="isEditing" ng-repeat="error in state.$errors">{{error}}<\/span><\/div>',restrict:"E",replace:!0,transclude:!0,scope:n.defaultScope,controller:["$scope",function(t){t.validate=function(){if(angular.isUndefined(t.min)==!1&&angular.isUndefined(t.value)==!1&&t.value.length<parseInt(t.min)){t.$valid=!1;t.state.$errors=["The fields needs to be minimum "+t.min+" chars"];return}if(angular.isUndefined(t.max)==!1&&angular.isUndefined(t.value)==!1&&t.value.length>parseInt(t.max)){t.$valid=!1;t.state.$errors=["The fields needs to be maximum "+t.min+" chars"];return}};n.setupScope(t)}]}}])})();
//# sourceMappingURL=tubular-directives-editors.min.js.map
